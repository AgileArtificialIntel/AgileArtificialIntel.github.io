## Robot Looking For An ExitThis chapter is about applying a genetic algorithm to help a small robot find an exit. ```SmalltalkObject subclass: #GARobot	instanceVariableNames: 'position map foodTakens'	classVariableNames: ''	poolDictionaries: ''	category: 'GeneticAlgorithm-Example-Robot'``````SmalltalkGARobot>>numberOfFoods	^ foodTakens size``````SmalltalkGARobot>>position	^ position``````SmalltalkGARobot>>map: aMap	"Set the map where the robot lives in"	map := aMap``````SmalltalkGARobot>>position: aPoint	position := aPoint``````SmalltalkGARobot>>initialize	super initialize.	foodTakens := OrderedCollection new``````SmalltalkGARobot>>followOrders: orders	| d possiblePosition path |	d := Dictionary new.	d at: $N put: 0 @ -1.	d at: $S put: 0 @ 1.	d at: $W put: -1 @ 0.	d at: $E put: 1 @ 0.	path := OrderedCollection new.	path add: map initialPosition.	self position: map initialPosition.	foodTakens := OrderedCollection new.	orders		do: [ :direction | 			possiblePosition := position + (d at: direction).			(((map gridAt: possiblePosition) == #food) and: [ (foodTakens includes: possiblePosition) not ])				ifTrue: [ foodTakens add: possiblePosition ].						"If we found the exit, then we return"			possiblePosition == map exitPosition ifTrue: [ ^ path ].									(map gridAt: possiblePosition) ~= #wall				ifTrue: [ position := possiblePosition.					path add: position ] ].	^ path``````SmalltalkObject subclass: #GARobotMap	instanceVariableNames: 'size content random'	classVariableNames: ''	poolDictionaries: ''	category: 'GeneticAlgorithm-Example-Robot'``````SmalltalkGARobotMap>>gridAt: aPoint put: value	(self includesPoint: aPoint)		ifFalse: [ ^ self ].	^ (content at: aPoint y) at: aPoint x put: value``````SmalltalkGARobotMap>>rand: anInteger	^ random nextInt: anInteger``````SmalltalkGARobotMap>>fillStartAndEndPoints	self gridAt: self initialPosition put: #start.	self gridAt: self exitPosition put: #end``````SmalltalkGARobotMap>>includesPoint: aPoint	^ (1 @ 1 extent: size @ size) containsPoint: aPoint``````SmalltalkGARobotMap>>exitPosition	^ (size - 1) @ (size - 1)``````SmalltalkGARobotMap>>addFoods: numberOfFoodsToAdd	"density is an integer"		| addedFood |	addedFood := 0.	[ addedFood < numberOfFoodsToAdd ] whileTrue: [ 		| x y |		x := self rand: size.		y := self rand: size.		(self gridAt: x @ y) == #empty ifTrue: [ 			self gridAt: x @ y put: #food.			addedFood := addedFood + 1		]	]``````SmalltalkGARobotMap>>initialPosition	^ 2 @ 2``````SmalltalkGARobotMap>>fillDensity: density	"density is an integer"		| offsets |	density timesRepeat: [ 		| x y |		x := self rand: size.		y := self rand: size.				offsets := (self rand: 2) = 1 			ifTrue: [ { 1 @ 0 . -1 @ 0 } ] 			ifFalse: [ { 0 @ -1 . 0 @ -1 } ].		self gridAt: x @ y put: #wall.		self gridAt: (x @ y) + offsets first put: #wall.		self gridAt: (x @ y) + offsets second put: #wall.	].	self fillStartAndEndPoints.	1 to: size do: [ :i | 		self gridAt: i @ 1 put: #wall. 		self gridAt: 1 @ i put: #wall.		self gridAt: size @ i put: #wall.		self gridAt: i @ size put: #wall.		 ] ``````SmalltalkGARobotMap>>size: aSize	size := aSize.	content := Array new: aSize.	1 to: size do: [ :i | content at: i put: (Array new: aSize withAll: #empty) ].	self fillStartAndEndPoints``````SmalltalkGARobotMap>>gridAt: aPoint	(self includesPoint: aPoint)		ifFalse: [ ^ #empty ].	^ (content at: aPoint y) at: aPoint x``````SmalltalkGARobotMap>>drawRobotPath: aPath	aPath do: [ :pos | self gridAt: pos put: #robot ]``````SmalltalkGARobotMap>>initialize	super initialize.	random := Random seed: 42.	self size: 30.``````SmalltalkGARobotMap>>open	| v colors shape |	colors := Dictionary new.	colors at: #empty put: Color white.	colors at: #wall put: Color brown.	colors at: #start put: Color red.	colors at: #end put: Color green.	colors at: #robot put: Color yellow.	colors at: #food put: Color blue.	v := RTView new.	shape := RTBox new size: 10; color: [ :c | colors at: c ].	content do: [ :line | 		v addAll: (shape elementsOn: line) @ RTPopup	].	RTGridLayout new gapSize: 0; lineItemsCount: size; on: v elements.	^ v open``````Smalltalk	| map robot g |	map := GARobotMap new fillDensity: 80.	robot := GARobot new.	robot map: map.	g := GAEngine new.	g endForMaxNumberOfGeneration: 10.	g numberOfGenes: 100.	g populationSize: 250.	g createGeneBlock: [ :rand :index :ind | #($N $S $W $E) atRandom: rand ].	g minimizeComparator.	g		fitnessBlock: [ :genes | 			robot followOrders: genes.			robot position dist: map exitPosition ].	g run.	map drawRobotPath: (robot followOrders: g result).	map open```