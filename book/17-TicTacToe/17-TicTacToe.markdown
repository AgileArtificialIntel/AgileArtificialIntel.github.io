<!--	| c |	c := CodeToMarkdown new.	c addClass: TicTacToe.	c addClass: TTTAbstractPlayer.	c addClass: TTTRandomPlayer.	c writeMarkdown: '/Users/alexandrebergel/Dropbox/Workspace/Books/AgileArtificialIntelligence.github.io/book/17-TicTacToe/17-TicTacToe.markdown'-->```SmalltalkObject subclass: #TicTacToe	instanceVariableNames: 'table players playerIndex'	classVariableNames: ''	package: 'TicTacToe'``````SmalltalkTicTacToe>>at: aPoint	^ table at: aPoint y * 3 + aPoint x``````SmalltalkTicTacToe>>at: aPoint put: aChar	^ table at: aPoint y * 3 + aPoint x put: aChar``````SmalltalkTicTacToe>>initialize	super initialize.	table := Array new: 9 withAll: $ . ``````SmalltalkTicTacToe>>players: somePlayers	self assert: [ somePlayers isCollection ] description: 'Should provide a collection of players'.	self assert: [ somePlayers size = 2 ] description: 'Two players are required'.	self assert: [ somePlayers asSet size = 2 ] description: 'Two different player should be provided'.	players := somePlayers asArray.	somePlayers first name: $X.	somePlayers second name: $O.	playerIndex := 1.	somePlayers do: [ :p | p game: self ]``````SmalltalkTicTacToe>>swapPlayer	playerIndex := (playerIndex = 1) ifTrue: [ 2 ] ifFalse: [ 1 ]``````SmalltalkTicTacToe>>update	self currentPlayer play.	self swapPlayer``````SmalltalkObject subclass: #TTTAbstractPlayer	instanceVariableNames: 'name game'	classVariableNames: ''	package: 'TicTacToe'``````SmalltalkTTTAbstractPlayer>>game	^ game``````SmalltalkTTTAbstractPlayer>>game: anObject	game := anObject``````SmalltalkTTTAbstractPlayer>>name	^ name``````SmalltalkTTTAbstractPlayer>>name: anObject	name := anObject``````SmalltalkTTTAbstractPlayer subclass: #TTTRandomPlayer	instanceVariableNames: ''	classVariableNames: ''	package: 'TicTacToe'```